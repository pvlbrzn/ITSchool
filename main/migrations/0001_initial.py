# Generated by Django 4.2.20 on 2025-04-23 18:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Преподаватель'), ('manager', 'Менеджер')], default='student', max_length=10, verbose_name='Роль')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Биография')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Возраст')),
                ('stack', models.CharField(blank=True, max_length=200, null=True, verbose_name='Стек технологий')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер телефона')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('annotation', models.TextField(verbose_name='Аннотация')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата публикации')),
                ('author', models.CharField(max_length=20, verbose_name='Автор')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
            ],
            options={
                'verbose_name': 'Блог',
                'verbose_name_plural': 'Блоги',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('duration', models.FloatField(help_text='Продолжительность курса в месяцах.', verbose_name='Длительность')),
                ('start_date', models.DateField(db_index=True, verbose_name='Дата начала')),
                ('end_date', models.DateField(db_index=True, verbose_name='Дата окончания')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Стоимость')),
                ('language', models.CharField(choices=[('python', 'Python'), ('java', 'Java'), ('js', 'JavaScript'), ('csharp', 'C#'), ('go', 'Go')], max_length=20, verbose_name='Язык')),
                ('skill', models.CharField(choices=[('frontend', 'Frontend'), ('backend', 'Backend'), ('test', 'Test'), ('devops', 'Devops'), ('security', 'Security'), ('ml', 'ML')], max_length=20, verbose_name='Тип')),
                ('students', models.ManyToManyField(limit_choices_to={'role': 'student'}, related_name='courses_as_student', to=settings.AUTH_USER_MODEL, verbose_name='Студенты')),
                ('teachers', models.ManyToManyField(limit_choices_to={'role': 'teacher'}, related_name='courses_as_teacher', to=settings.AUTH_USER_MODEL, verbose_name='Преподаватели')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
                'ordering': ['title', 'price'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Сумма оплаты')),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата оплаты')),
                ('is_successful', models.BooleanField(default=True, verbose_name='Оплата прошла успешно?')),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Метод оплаты')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='main.course', verbose_name='Курс')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Оплата',
                'verbose_name_plural': 'Оплаты',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Тема занятия')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='main.course', verbose_name='Курс')),
                ('teacher', models.ForeignKey(blank=True, limit_choices_to={'role': 'teacher'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lessons', to=settings.AUTH_USER_MODEL, verbose_name='Преподаватель')),
            ],
            options={
                'verbose_name': 'Занятие',
                'verbose_name_plural': 'Занятия',
                'ordering': ['title'],
            },
        ),
    ]
