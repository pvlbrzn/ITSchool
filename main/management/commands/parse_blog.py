import asyncio
from playwright.async_api import async_playwright, Page

from django.utils import timezone
from django.core.management.base import BaseCommand
from main.models import Blog
from asgiref.sync import sync_to_async
from typing import Optional


class Command(BaseCommand):
    """
    Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–≥–æ–≤ —Å —Å–∞–π—Ç–∞ TeachMeSkills.
    """
    help = '–ü–∞—Ä—Å–∏—Ç –±–ª–æ–≥–∏ —Å —Å–∞–π—Ç–∞ TeachMeSkills –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.'

    def handle(self, *args, **options):
        asyncio.run(parse_and_save_blogs())


async def fetch_blog_html(url: str, page: Page) -> bool:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h1.

    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–≥.
    :param page: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright.
    :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    try:
        await page.goto(url, timeout=60000)
        await page.wait_for_selector("h1.tn-atom", timeout=60000)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        return False


async def parse_and_save_blogs() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É, –ø–∞—Ä—Å–∏—Ç –±–ª–æ–≥-–ø–æ—Å—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö.
    """
    await sync_to_async(Blog.objects.all().delete)()
    print("üßπ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º!")

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –±–ª–æ–≥–∞–º–∏
        await page.goto('https://teachmeskills.by/blog', timeout=60000)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–ª–æ–≥-–ø–æ—Å—Ç—ã
        links = await page.locator('div.t-card__title a').evaluate_all(
            'elements => elements.map(element => element.href)'
        )
        links = list(set(links))
        print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(links)}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ –ø–µ—Ä–≤—ã—Ö 15
        for url in links[:15]:
            try:
                await page.goto(url, timeout=30000)

                try:
                    await page.wait_for_selector('h1', timeout=10000)
                except Exception as e:
                    print(f"‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ {url}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º. –ü—Ä–∏—á–∏–Ω–∞: {e}")
                    continue

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                title: str = await page.locator('h1').inner_text()

                # –ö–∞—Ä—Ç–∏–Ω–∫–∞ (–ø–µ—Ä–≤–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è)
                try:
                    image_url: Optional[str] = await page.locator('img.t-img.t-width').first.get_attribute('src')
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ {url}: {e}")
                    image_url = None

                # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è ‚Äî –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –≤–Ω—É—Ç—Ä–∏ div
                try:
                    annotation_block = page.locator('div.t-text.t-text_md p')
                    annotation: str = await annotation_block.first.inner_text() if await annotation_block.count() > 0 else ''
                except Exception:
                    annotation = ''

                # –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
                content_blocks = await page.locator('div.t-col.t-col_10.t-prefix_1').all_inner_texts()
                content: str = "\n\n".join(content_blocks)

                # –ê–≤—Ç–æ—Ä –∏ –¥–∞—Ç–∞
                author = "TeachMeSkills"
                date_obj = timezone.now()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
                created = await save_blog(title, annotation, content, image_url, date_obj, author)

                if created:
                    print(f"üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {title} ({date_obj.strftime('%d.%m.%Y')})")
                else:
                    print(f"‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {title}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")
                continue

        await browser.close()


async def save_blog(
    title: str,
    annotation: str,
    content: str,
    image_url: Optional[str],
    publication_date,
    author: str
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–ª–æ–≥ –≤ –±–∞–∑—É, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏.
    :param annotation: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
    :param content: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç.
    :param image_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    :param publication_date: –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    :param author: –ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏.
    :return: True, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω, False ‚Äî –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    obj, created = await sync_to_async(Blog.objects.get_or_create)(
        title=title,
        defaults={
            "annotation": annotation,
            "content": content,
            "image": image_url,
            "date": publication_date,
            "author": author
        }
    )
    return created
