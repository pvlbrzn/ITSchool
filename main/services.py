import requests
from bs4 import BeautifulSoup as Bs
from faker import Faker

from django.utils import timezone

from .models import Blog

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Faker –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fake = Faker('ru_RU')


def fetch_blog_html(url: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–≥–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL.
    """
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
        )
    }
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise RuntimeError(f'–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML, —Å—Ç–∞—Ç—É—Å: {response.status_code}')
    return response.text


def extract_image_url(block) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–ª–æ–∫–∞ –±–ª–æ–≥–∞.
    """
    meta_tag = block.select_one("meta[itemprop='image']")
    return meta_tag["content"] if meta_tag and "content" in meta_tag.attrs else ""


def extract_blog_blocks(html: str):
    """
    –ü–∞—Ä—Å–∏—Ç HTML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Å –ø–æ—Å—Ç–∞–º–∏ –±–ª–æ–≥–∞.
    """
    soup = Bs(html, 'lxml')
    container = soup.select_one('#rec220606141 > div > div.t-card__container.t-container')
    if not container:
        raise RuntimeError("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return container.select("div > div")


def generate_fake_content() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–µ–π–∫–æ–≤–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.
    """
    return fake.text(max_nb_chars=5000)


def save_blog(title, annotation, content, image_url, publication_date, author):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –±–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    obj, created = Blog.objects.get_or_create(
        title=title,
        defaults={
            "annotation": annotation,
            "content": content,
            "image": image_url,
            "date": publication_date,
            "author": author
        }
    )
    return created


def parse_blog():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—á–∏—â–∞–µ—Ç –ë–î, –ø–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç—ã —Å —Å–∞–π—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É.
    """
    Blog.objects.all().delete()  # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    url = 'https://teachmeskills.by/blog'
    html = fetch_blog_html(url)
    blocks = extract_blog_blocks(html)

    for block in blocks:
        title_tag = block.select_one("div.t-name")
        annotation_tag = block.select_one("div.t-descr")
        image_url = extract_image_url(block)

        if not title_tag or not annotation_tag:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –±–ª–æ–≥–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ): {block}")
            continue

        title = title_tag.get_text(strip=True)
        annotation = annotation_tag.get_text(strip=True)
        content = generate_fake_content()
        date = timezone.now()
        author = "TeachMeSkills"

        created = save_blog(title, annotation, content, image_url, date, author)
        if created:
            print(f"üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {title} ({date.strftime('%d.%m.%Y')})")
        else:
            print(f"‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {title}")
